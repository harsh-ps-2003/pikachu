// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(
        oneof = "message::Payload",
        tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"
    )]
    pub payload: ::core::option::Option<message::Payload>,
}
/// Nested message and enum types in `Message`.
pub mod message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "2")]
        LookupRequest(super::LookupRequest),
        #[prost(message, tag = "3")]
        LookupResponse(super::LookupResponse),
        #[prost(message, tag = "4")]
        JoinRequest(super::JoinRequest),
        #[prost(message, tag = "5")]
        JoinResponse(super::JoinResponse),
        #[prost(message, tag = "6")]
        StabilizeRequest(super::StabilizeRequest),
        #[prost(message, tag = "7")]
        StabilizeResponse(super::StabilizeResponse),
        #[prost(message, tag = "8")]
        NotifyRequest(super::NotifyRequest),
        #[prost(message, tag = "9")]
        NotifyResponse(super::NotifyResponse),
        #[prost(message, tag = "10")]
        FingerRequest(super::FingerRequest),
        #[prost(message, tag = "11")]
        FingerResponse(super::FingerResponse),
        #[prost(message, tag = "12")]
        ReplicateRequest(super::ReplicateRequest),
        #[prost(message, tag = "13")]
        ReplicateResponse(super::ReplicateResponse),
        #[prost(message, tag = "14")]
        HeartbeatRequest(super::HeartbeatRequest),
        #[prost(message, tag = "15")]
        HeartbeatResponse(super::HeartbeatResponse),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(bytes = "vec", tag = "1")]
    pub node_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub requesting_node: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub responsible_node: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub joining_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub successor: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "3")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(message, repeated, tag = "4")]
    pub transferred_data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(bool, tag = "5")]
    pub success: bool,
    #[prost(string, tag = "6")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub predecessor: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bool, tag = "2")]
    pub accepted: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FingerRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub finger_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FingerResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub responsible_node: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "3")]
    pub success: bool,
    #[prost(string, tag = "4")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(uint32, tag = "3")]
    pub replication_factor: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(message, optional, tag = "2")]
    pub sender: ::core::option::Option<NodeInfo>,
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(bool, tag = "2")]
    pub alive: bool,
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
