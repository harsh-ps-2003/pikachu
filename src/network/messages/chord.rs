// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(bytes = "vec", tag = "1")]
    pub node_id: ::prost::alloc::vec::Vec<u8>,
    /// gRPC address of the node
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
/// Core DHT Operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupResponse {
    #[prost(message, optional, tag = "1")]
    pub responsible_node: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// Chord Maintenance Operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindSuccessorRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindSuccessorResponse {
    #[prost(message, optional, tag = "1")]
    pub successor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPredecessorRequest {
    #[prost(message, optional, tag = "1")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPredecessorResponse {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRequest {
    #[prost(message, optional, tag = "1")]
    pub joining_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinResponse {
    #[prost(message, optional, tag = "1")]
    pub successor: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "2")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(message, repeated, tag = "3")]
    pub transferred_data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeRequest {
    #[prost(message, optional, tag = "1")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeResponse {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRequest {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyResponse {
    #[prost(bool, tag = "1")]
    pub accepted: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
/// Health Check
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    #[prost(message, optional, tag = "1")]
    pub sender: ::core::option::Option<NodeInfo>,
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    #[prost(bool, tag = "1")]
    pub alive: bool,
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
}
/// Utility Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
