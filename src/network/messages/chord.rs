// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(bytes = "vec", tag = "1")]
    pub node_id: ::prost::alloc::vec::Vec<u8>,
    /// gRPC address of the node
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
}
/// Core DHT Operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupResponse {
    #[prost(message, optional, tag = "1")]
    pub responsible_node: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// Chord Maintenance Operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindSuccessorRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindSuccessorResponse {
    #[prost(message, optional, tag = "1")]
    pub successor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPredecessorRequest {
    #[prost(message, optional, tag = "1")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPredecessorResponse {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinRequest {
    #[prost(message, optional, tag = "1")]
    pub joining_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinResponse {
    #[prost(message, optional, tag = "1")]
    pub successor: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "2")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(message, repeated, tag = "3")]
    pub transferred_data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeRequest {
    #[prost(message, optional, tag = "1")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StabilizeResponse {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRequest {
    #[prost(message, optional, tag = "1")]
    pub predecessor: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyResponse {
    #[prost(bool, tag = "1")]
    pub accepted: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
/// Health Check
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    #[prost(message, optional, tag = "1")]
    pub sender: ::core::option::Option<NodeInfo>,
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    #[prost(bool, tag = "1")]
    pub alive: bool,
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
}
/// Utility Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
/// Replication Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateRequest {
    #[prost(message, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(message, optional, tag = "2")]
    pub source_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferKeysRequest {
    /// ID of the node that should receive the keys
    #[prost(bytes = "vec", tag = "1")]
    pub target_id: ::prost::alloc::vec::Vec<u8>,
    /// Node requesting the transfer
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
    /// Keys to transfer (if any)
    #[prost(message, repeated, tag = "3")]
    pub keys: ::prost::alloc::vec::Vec<KeyValue>,
    /// Whether this is a join operation
    #[prost(bool, tag = "4")]
    pub is_join: bool,
    /// Whether this is a leave operation
    #[prost(bool, tag = "5")]
    pub is_leave: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferKeysResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, repeated, tag = "2")]
    pub transferred_data: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// New streaming transfer message for efficient handoff
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandoffRequest {
    /// Node initiating the handoff
    #[prost(message, optional, tag = "1")]
    pub source_node: ::core::option::Option<NodeInfo>,
    /// Whether this is due to node shutdown
    #[prost(bool, tag = "2")]
    pub is_shutdown: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandoffResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(uint32, tag = "2")]
    pub keys_transferred: u32,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// New messages for successor list management
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSuccessorListRequest {
    #[prost(message, optional, tag = "1")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSuccessorListResponse {
    #[prost(message, repeated, tag = "1")]
    pub successors: ::prost::alloc::vec::Vec<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// New messages for finger table maintenance
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FixFingerRequest {
    #[prost(uint32, tag = "1")]
    pub index: u32,
    #[prost(message, optional, tag = "2")]
    pub requesting_node: ::core::option::Option<NodeInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FixFingerResponse {
    #[prost(message, optional, tag = "1")]
    pub finger_node: ::core::option::Option<NodeInfo>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod chord_node_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ChordNodeClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ChordNodeClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ChordNodeClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ChordNodeClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ChordNodeClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Core DHT operations
        pub async fn lookup(
            &mut self,
            request: impl tonic::IntoRequest<super::LookupRequest>,
        ) -> std::result::Result<tonic::Response<super::LookupResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Lookup");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Lookup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put(
            &mut self,
            request: impl tonic::IntoRequest<super::PutRequest>,
        ) -> std::result::Result<tonic::Response<super::PutResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Put");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Put"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Get");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Get"));
            self.inner.unary(req, path, codec).await
        }
        /// Chord maintenance operations
        pub async fn join(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinRequest>,
        ) -> std::result::Result<tonic::Response<super::JoinResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Join");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Join"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn notify(
            &mut self,
            request: impl tonic::IntoRequest<super::NotifyRequest>,
        ) -> std::result::Result<tonic::Response<super::NotifyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Notify");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Notify"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn stabilize(
            &mut self,
            request: impl tonic::IntoRequest<super::StabilizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StabilizeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/Stabilize",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Stabilize"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_successor(
            &mut self,
            request: impl tonic::IntoRequest<super::FindSuccessorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindSuccessorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/FindSuccessor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("chord.ChordNode", "FindSuccessor"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_predecessor(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPredecessorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPredecessorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/GetPredecessor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("chord.ChordNode", "GetPredecessor"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_successor_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSuccessorListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSuccessorListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/GetSuccessorList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("chord.ChordNode", "GetSuccessorList"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn fix_finger(
            &mut self,
            request: impl tonic::IntoRequest<super::FixFingerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FixFingerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/FixFinger",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "FixFinger"));
            self.inner.unary(req, path, codec).await
        }
        /// Health check
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Heartbeat"));
            self.inner.unary(req, path, codec).await
        }
        /// Data replication and transfer
        pub async fn replicate(
            &mut self,
            request: impl tonic::IntoRequest<super::ReplicateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/Replicate",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Replicate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn transfer_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::TransferKeysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferKeysResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/TransferKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("chord.ChordNode", "TransferKeys"));
            self.inner.unary(req, path, codec).await
        }
        /// Efficient streaming handoff for large datasets
        pub async fn handoff(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::KeyValue>,
        ) -> std::result::Result<
            tonic::Response<super::HandoffResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/chord.ChordNode/Handoff");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("chord.ChordNode", "Handoff"));
            self.inner.client_streaming(req, path, codec).await
        }
        pub async fn request_handoff(
            &mut self,
            request: impl tonic::IntoRequest<super::HandoffRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::KeyValue>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/chord.ChordNode/RequestHandoff",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("chord.ChordNode", "RequestHandoff"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod chord_node_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ChordNodeServer.
    #[async_trait]
    pub trait ChordNode: std::marker::Send + std::marker::Sync + 'static {
        /// Core DHT operations
        async fn lookup(
            &self,
            request: tonic::Request<super::LookupRequest>,
        ) -> std::result::Result<tonic::Response<super::LookupResponse>, tonic::Status>;
        async fn put(
            &self,
            request: tonic::Request<super::PutRequest>,
        ) -> std::result::Result<tonic::Response<super::PutResponse>, tonic::Status>;
        async fn get(
            &self,
            request: tonic::Request<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status>;
        /// Chord maintenance operations
        async fn join(
            &self,
            request: tonic::Request<super::JoinRequest>,
        ) -> std::result::Result<tonic::Response<super::JoinResponse>, tonic::Status>;
        async fn notify(
            &self,
            request: tonic::Request<super::NotifyRequest>,
        ) -> std::result::Result<tonic::Response<super::NotifyResponse>, tonic::Status>;
        async fn stabilize(
            &self,
            request: tonic::Request<super::StabilizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StabilizeResponse>,
            tonic::Status,
        >;
        async fn find_successor(
            &self,
            request: tonic::Request<super::FindSuccessorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindSuccessorResponse>,
            tonic::Status,
        >;
        async fn get_predecessor(
            &self,
            request: tonic::Request<super::GetPredecessorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPredecessorResponse>,
            tonic::Status,
        >;
        async fn get_successor_list(
            &self,
            request: tonic::Request<super::GetSuccessorListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSuccessorListResponse>,
            tonic::Status,
        >;
        async fn fix_finger(
            &self,
            request: tonic::Request<super::FixFingerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FixFingerResponse>,
            tonic::Status,
        >;
        /// Health check
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
        /// Data replication and transfer
        async fn replicate(
            &self,
            request: tonic::Request<super::ReplicateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicateResponse>,
            tonic::Status,
        >;
        async fn transfer_keys(
            &self,
            request: tonic::Request<super::TransferKeysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferKeysResponse>,
            tonic::Status,
        >;
        /// Efficient streaming handoff for large datasets
        async fn handoff(
            &self,
            request: tonic::Request<tonic::Streaming<super::KeyValue>>,
        ) -> std::result::Result<tonic::Response<super::HandoffResponse>, tonic::Status>;
        /// Server streaming response type for the RequestHandoff method.
        type RequestHandoffStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::KeyValue, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn request_handoff(
            &self,
            request: tonic::Request<super::HandoffRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::RequestHandoffStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ChordNodeServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ChordNodeServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ChordNodeServer<T>
    where
        T: ChordNode,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/chord.ChordNode/Lookup" => {
                    #[allow(non_camel_case_types)]
                    struct LookupSvc<T: ChordNode>(pub Arc<T>);
                    impl<T: ChordNode> tonic::server::UnaryService<super::LookupRequest>
                    for LookupSvc<T> {
                        type Response = super::LookupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LookupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::lookup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Put" => {
                    #[allow(non_camel_case_types)]
                    struct PutSvc<T: ChordNode>(pub Arc<T>);
                    impl<T: ChordNode> tonic::server::UnaryService<super::PutRequest>
                    for PutSvc<T> {
                        type Response = super::PutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::put(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: ChordNode>(pub Arc<T>);
                    impl<T: ChordNode> tonic::server::UnaryService<super::GetRequest>
                    for GetSvc<T> {
                        type Response = super::GetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Join" => {
                    #[allow(non_camel_case_types)]
                    struct JoinSvc<T: ChordNode>(pub Arc<T>);
                    impl<T: ChordNode> tonic::server::UnaryService<super::JoinRequest>
                    for JoinSvc<T> {
                        type Response = super::JoinResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::join(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = JoinSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Notify" => {
                    #[allow(non_camel_case_types)]
                    struct NotifySvc<T: ChordNode>(pub Arc<T>);
                    impl<T: ChordNode> tonic::server::UnaryService<super::NotifyRequest>
                    for NotifySvc<T> {
                        type Response = super::NotifyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NotifyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::notify(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NotifySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Stabilize" => {
                    #[allow(non_camel_case_types)]
                    struct StabilizeSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::StabilizeRequest>
                    for StabilizeSvc<T> {
                        type Response = super::StabilizeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StabilizeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::stabilize(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StabilizeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/FindSuccessor" => {
                    #[allow(non_camel_case_types)]
                    struct FindSuccessorSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::FindSuccessorRequest>
                    for FindSuccessorSvc<T> {
                        type Response = super::FindSuccessorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindSuccessorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::find_successor(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindSuccessorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/GetPredecessor" => {
                    #[allow(non_camel_case_types)]
                    struct GetPredecessorSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::GetPredecessorRequest>
                    for GetPredecessorSvc<T> {
                        type Response = super::GetPredecessorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPredecessorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::get_predecessor(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPredecessorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/GetSuccessorList" => {
                    #[allow(non_camel_case_types)]
                    struct GetSuccessorListSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::GetSuccessorListRequest>
                    for GetSuccessorListSvc<T> {
                        type Response = super::GetSuccessorListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSuccessorListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::get_successor_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSuccessorListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/FixFinger" => {
                    #[allow(non_camel_case_types)]
                    struct FixFingerSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::FixFingerRequest>
                    for FixFingerSvc<T> {
                        type Response = super::FixFingerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FixFingerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::fix_finger(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FixFingerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Replicate" => {
                    #[allow(non_camel_case_types)]
                    struct ReplicateSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::ReplicateRequest>
                    for ReplicateSvc<T> {
                        type Response = super::ReplicateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReplicateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::replicate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReplicateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/TransferKeys" => {
                    #[allow(non_camel_case_types)]
                    struct TransferKeysSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::UnaryService<super::TransferKeysRequest>
                    for TransferKeysSvc<T> {
                        type Response = super::TransferKeysResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransferKeysRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::transfer_keys(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TransferKeysSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/Handoff" => {
                    #[allow(non_camel_case_types)]
                    struct HandoffSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::ClientStreamingService<super::KeyValue>
                    for HandoffSvc<T> {
                        type Response = super::HandoffResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::KeyValue>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::handoff(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HandoffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/chord.ChordNode/RequestHandoff" => {
                    #[allow(non_camel_case_types)]
                    struct RequestHandoffSvc<T: ChordNode>(pub Arc<T>);
                    impl<
                        T: ChordNode,
                    > tonic::server::ServerStreamingService<super::HandoffRequest>
                    for RequestHandoffSvc<T> {
                        type Response = super::KeyValue;
                        type ResponseStream = T::RequestHandoffStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HandoffRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChordNode>::request_handoff(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RequestHandoffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ChordNodeServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "chord.ChordNode";
    impl<T> tonic::server::NamedService for ChordNodeServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
